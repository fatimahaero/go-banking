// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	sql "database/sql"
	domain "go-banking/domain"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// BeginTransaction provides a mock function with no fields
func (_m *TransactionRepository) BeginTransaction() (*sql.Tx, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sql.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sql.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransaction provides a mock function with given fields: trx, amount
func (_m *TransactionRepository) CreateTransaction(trx domain.Transaction, amount float64) (*domain.Transaction, error) {
	ret := _m.Called(trx, amount)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransaction")
	}

	var r0 *domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Transaction, float64) (*domain.Transaction, error)); ok {
		return rf(trx, amount)
	}
	if rf, ok := ret.Get(0).(func(domain.Transaction, float64) *domain.Transaction); ok {
		r0 = rf(trx, amount)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.Transaction, float64) error); ok {
		r1 = rf(trx, amount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByAccountID provides a mock function with given fields: accountID
func (_m *TransactionRepository) GetTransactionByAccountID(accountID string) ([]domain.Transaction, error) {
	ret := _m.Called(accountID)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByAccountID")
	}

	var r0 []domain.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]domain.Transaction, error)); ok {
		return rf(accountID)
	}
	if rf, ok := ret.Get(0).(func(string) []domain.Transaction); ok {
		r0 = rf(accountID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountBalance provides a mock function with given fields: accountID, destinationAccountID, amount, trxType
func (_m *TransactionRepository) UpdateAccountBalance(accountID string, destinationAccountID string, amount float64, trxType string) error {
	ret := _m.Called(accountID, destinationAccountID, amount, trxType)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountBalance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, float64, string) error); ok {
		r0 = rf(accountID, destinationAccountID, amount, trxType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTransactionRepository creates a new instance of TransactionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepository {
	mock := &TransactionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
